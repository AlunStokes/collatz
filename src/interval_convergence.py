#from math import log, ceil
from mpmath import *
mp.dps = 1000
mp.pretty = True

from utils import gcd
#import numpy as np

import matplotlib.pyplot as plt

LC = [1, 1, 1, 2, 2, 3, 1, 5, 2, 23, 2, 2, 1, 1, 55, 1, 4, 3, 1, 1, 15, 1, 9, 2, 5, 7, 1, 1, 4, 8, 1, 11, 1, 20, 2, 1, 10, 1, 4, 1, 1, 1, 1, 1, 37, 4, 55, 1, 1, 49, 1, 1, 1, 4, 1, 3, 2, 3, 3, 1, 5, 16, 2, 3, 1, 1, 1, 1, 1, 5, 2, 1, 2, 8, 7, 1, 1, 2, 1, 1, 3, 3, 1, 1, 1, 1, 5, 4, 2, 2, 2, 16, 8, 10, 1, 25, 2, 1, 1, 1, 2, 18, 10, 1, 1, 1, 1, 9, 1, 5, 6, 2, 1, 1, 12, 1, 1, 1, 6, 2, 12, 1, 1, 12, 1, 1, 2, 12, 1, 12, 3, 1, 5, 1, 14, 1, 1, 14, 2, 3, 1, 2, 2, 1, 4, 1, 4, 8, 1, 1, 1, 3, 5, 1, 1, 1, 1, 2, 1, 4, 3, 7, 5, 3, 1, 32, 1, 1, 1, 18, 1, 3, 2, 5, 2, 1, 3, 1, 8, 1, 1, 1, 2, 6, 6, 5, 33, 2, 2, 3, 1, 1, 1, 1, 29, 1, 3, 2, 1, 21, 1, 6, 52, 1, 8, 1, 4, 14, 9, 7, 1, 4, 18, 2, 2, 1, 1, 2, 100, 39, 1, 2, 1, 1, 19, 1, 5, 9, 1, 3, 964, 5, 1, 1, 1, 39, 1, 1, 1, 1, 5, 3, 1, 88, 1, 2, 1, 3, 1, 11, 1, 23, 11, 1, 1, 1, 2, 1, 1, 4, 3, 1, 5, 1, 4, 2, 1, 75, 1, 2, 1, 11, 17, 2, 5, 3, 1, 3, 34, 1, 10, 2, 4, 7, 1, 1, 23, 1, 6, 3, 1, 7, 1, 17, 2, 1, 24, 1, 1, 1, 10, 1, 4, 1, 1, 5, 3, 2, 1, 2, 1, 1, 3, 6, 8, 1, 8, 2, 1, 1, 4, 2, 7, 9, 2, 2, 2, 1, 7, 12, 2436, 1, 2, 1, 9, 10, 1, 5, 1, 3, 1, 2, 1, 2, 3, 1, 1, 3, 1, 4, 6, 1, 2, 1, 2, 2, 1, 2, 1, 1, 3, 46, 31, 196, 4, 1, 1, 3, 11, 1, 3, 14, 1, 1, 3, 2, 20, 1, 3, 6, 3, 85, 1, 7, 1, 9, 4, 5, 2, 1, 1, 78, 1, 4, 4, 2, 6, 6, 2, 4, 8, 4, 5, 1, 1, 11, 1, 2, 1, 5, 13, 2, 1, 3, 4, 2, 7, 5, 2, 2, 1, 2, 10, 1, 163, 1, 3, 1, 1, 1, 2, 1, 1, 2, 1, 6, 30, 1, 2, 2, 13, 1, 1, 2, 1, 2, 1, 1, 1, 3, 2, 5, 1, 5, 3, 1, 3, 1, 3, 2, 36, 1, 1, 1, 1, 9, 7, 1, 28, 2, 1, 1, 5, 1, 11, 10, 3, 1, 2, 1, 1, 2, 19, 2, 5, 5, 1, 4, 1, 1, 2, 1, 5, 3, 10, 3, 3, 1, 1, 8, 3, 5, 1, 10, 22, 10, 7, 1, 2, 1, 1, 69, 6, 1, 10, 7, 4, 1, 1, 1, 2, 1, 7, 3, 6, 1, 8, 1, 3308, 1, 4, 1, 7, 1, 1, 2, 1, 1, 4, 4, 47, 9, 1, 1, 1, 2, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 9, 1, 4, 71, 1, 1, 1, 1, 1, 31, 1, 31, 3, 1, 13, 36, 1, 92, 2, 2, 4, 1, 1, 93, 1, 17, 2, 2, 5, 1, 3, 1, 1, 7, 20, 3, 2, 47, 1, 2, 1, 1, 2, 1, 1, 19, 54, 2, 1, 4, 1, 4, 3, 75, 2, 21, 1, 1, 1, 1, 1, 2, 8, 3, 1, 2, 1, 1, 5, 2, 6, 1, 1, 40, 5, 23, 1, 4, 1, 2, 21, 1, 6, 1, 2, 1, 20, 5, 5, 3, 1, 2, 2, 12, 2, 41, 1, 24, 13, 4, 1, 2, 5, 3, 3, 2, 1, 3, 2, 1, 2, 73, 3, 1, 11, 9, 1, 7, 2, 1, 7, 14, 1, 2, 2, 1, 1, 3, 2, 1, 19, 15, 1, 45, 1, 4, 1, 6, 1, 3, 1, 6, 2, 4, 1, 3, 7, 10, 5, 1, 1, 1, 4, 1, 2, 1, 1, 26, 1, 1, 77, 24, 1, 1, 1, 3, 3, 4, 2, 1, 1, 5, 10, 2, 34, 1, 4, 1, 1, 1, 1, 2, 10, 1, 6, 16, 2, 1, 10, 1, 1, 3, 1, 1, 1, 1, 2, 2, 2, 21, 1, 3, 1, 1, 4, 16, 1, 2, 1, 24, 2, 6, 3, 2, 3, 1, 14, 1, 1, 1, 8, 1, 1, 15, 52, 3, 3, 2, 4, 11, 1, 2, 1, 2, 1, 1, 1, 3, 3, 43, 2, 1, 6, 1, 1, 1, 1, 1, 8, 4, 1, 1, 1, 57, 1, 4, 1, 2, 3, 14, 1, 1, 9, 1, 1, 3, 8, 1, 2, 4, 1, 1, 2, 1, 13, 4, 1, 4, 1, 3, 2, 5, 4, 3, 1, 4, 2, 2, 1, 4, 2, 3, 2, 2, 3, 1, 13, 1, 1, 1, 9, 9, 2, 2, 1, 6, 5, 2, 3, 1, 1, 5, 12, 1, 10, 1, 46, 81, 2, 5, 1, 3, 1, 1, 11, 1, 3, 2, 2, 6, 488, 1, 16, 8, 27, 1, 4, 67, 1, 8, 14, 1, 2, 1, 17, 7, 2, 12, 1, 12, 2, 1, 15, 1, 1, 1, 8, 4, 4, 1, 9, 1, 2, 3, 1, 4, 5, 2, 6, 1, 3, 3, 3, 1, 6, 1, 3, 3, 3, 2, 1, 1, 10, 4, 1, 6, 1, 1, 2, 1, 1, 2, 3, 240, 1, 2, 1, 1, 4, 1, 4, 1, 4, 2, 4, 1, 5, 3, 1, 6, 3, 5, 2, 1, 19, 1, 1, 24, 6, 11, 77, 1, 1, 1, 11, 3, 3, 3, 6, 5, 4, 1, 21, 1, 3, 1, 14, 2, 5, 1, 12, 1, 1, 1, 14, 1, 5, 4, 3, 2, 1, 3, 2, 2, 4, 3, 2, 6, 3, 1, 1, 2, 1, 4, 2, 1, 1, 8, 1, 8, 2, 1, 1, 1, 3, 9, 5, 1, 3, 10, 16, 5, 1, 2, 1, 29, 4, 2, 4, 1, 5, 1, 1, 1, 1, 2, 1, 3, 3, 1, 1, 1, 1, 2, 1, 3, 3, 1, 23, 1, 2, 2, 1, 6, 1, 2, 1, 3, 4, 19, 2, 2, 1, 3, 1, 9, 1, 1, 2, 5, 2, 2, 4, 7, 5, 7, 2, 1, 3, 89, 1, 2, 2, 4, 13, 1, 1, 8, 1, 1, 1, 1, 1, 3, 1, 1, 1, 6, 14, 1, 1, 8, 1, 35, 1, 2, 1, 3, 1, 1, 1, 41, 1, 3, 1, 6, 1, 15, 10, 1, 1, 1, 1, 271, 1, 1, 2, 3, 1, 2, 2, 1, 1, 1, 4, 1, 1, 1, 25, 8, 2, 2, 3, 1, 1, 1, 1, 1, 87, 1, 2, 1, 2, 33, 1, 3, 1, 1, 1, 21, 10, 3, 565, 10, 1, 18, 5, 2, 4, 2, 1, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 9, 6, 12, 1, 7, 1, 1, 3, 18, 1, 2, 1, 3, 1, 3, 1, 2, 3, 3, 2, 1, 9, 2, 2, 1, 11, 6, 3, 5, 1, 1, 1, 34, 1, 7, 5, 7, 3, 1, 4, 1, 1, 1, 7, 4, 2, 4, 4, 3, 1, 1, 6, 3, 1, 1, 1, 1, 19, 1, 3, 2, 33, 1, 14, 3, 4, 3, 1, 3, 7, 90, 7, 9, 4, 10, 2, 8, 1, 2, 1, 139, 3, 7, 2, 1, 10, 11, 1, 91, 13, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 13, 1, 8, 7, 3, 5, 75, 4, 1, 1, 1, 2, 3, 295, 1, 1, 2, 2, 1, 3, 1, 1, 1, 10, 6, 2, 1, 2, 1, 1, 6, 8, 3, 2, 1, 1, 1, 5, 4, 1, 3, 3, 2, 83, 5, 1, 16, 8, 343, 3, 1, 6, 2, 29, 1, 2, 3, 1, 6, 1, 2, 3, 1, 1, 1, 1, 8, 1, 16, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 5, 2, 1, 2, 1, 5, 1, 3, 1, 4, 1, 4, 1, 2, 1, 2, 3, 1, 1, 2, 2, 70, 2, 1, 14, 1, 3, 1, 5, 5, 2, 1, 4, 4, 1, 3, 1, 1, 1, 3, 5, 1, 101, 7, 1, 1, 2, 2, 25, 1, 13, 1, 6, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 3, 5, 1, 1, 2, 151, 2, 3, 5, 2, 2, 4, 1, 4, 1, 2, 1, 16, 1, 1, 9, 1, 4, 1, 6, 1, 1, 1, 1, 12, 33, 1, 5, 2, 28, 1, 1, 4, 1, 1, 12, 5, 94, 1, 1, 1, 6, 3, 1, 1, 1, 37, 2, 2, 3, 1, 12, 1, 1, 6, 1, 4, 1, 4, 3, 37, 6, 1, 3, 1, 3, 24, 3, 1, 2, 12, 22, 1, 39, 1, 4, 1, 1, 11, 1, 4, 1, 2, 2, 1, 1, 2, 1, 1, 1, 3, 1, 497, 1, 1, 1, 1, 2, 1, 5, 1, 4, 3, 1, 12, 1, 1, 1, 3, 6, 1, 1, 1, 1, 1, 11, 9, 10, 1, 5, 31, 1, 3, 3, 2, 1, 1, 8, 23, 2, 1, 1, 1, 1, 2, 30, 1, 1, 1, 1, 14, 1, 2, 2, 6, 16, 14, 2, 1, 2, 2, 1, 3, 1, 3, 4, 3, 1, 1192, 2, 1, 3, 1, 7, 2, 2, 11, 2, 1, 14, 2, 3, 1, 256, 1, 1, 1, 1, 1, 7, 1, 7, 4, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 17, 1, 2, 1, 1, 6, 3, 2, 22, 2, 3, 1, 1, 3, 4, 2, 9, 2, 1, 11, 7, 1, 262, 1, 2, 1, 32, 1, 43, 1, 8, 1, 1, 1, 8, 6, 5, 1924, 1, 6, 1, 3, 3, 14, 1, 1, 11, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 3, 1, 4, 1, 7, 1, 19, 3, 2, 1, 2, 1, 5, 4, 8, 2, 1, 5, 4, 4, 1, 1, 6, 2, 2, 1, 1, 4, 1, 1, 7, 9, 1, 1, 15, 3, 3, 2, 1, 1, 1, 4, 2, 1, 1, 2, 1, 1, 69, 5, 11, 2, 2, 4, 2, 56, 2, 4, 1, 2, 1, 3, 24, 10, 1, 2, 5, 5, 1, 4, 3, 1, 1, 1, 8, 2, 3]


def lower_bound(a):
    return a * ln(3) / ln(2)

def upper_bound(a):
    return (a * ln(2) + 2 * a * ln(3) - ln(3**a * 2**a - 3**a + 2**a)) / ln(2)

def log_ceil_dist(a):
    return ceil(a * ln(3) / ln(2)) - a * ln(3) / ln(2)

def log_floor_dist(a):
    return a * ln(3) / ln(2) - floor(a * ln(3) / ln(2))

def log_dist(a):
    return min([log_ceil_dist(a), log_floor_dist(a)])

def graph_decreasing_log_ceil_dist(A):
    L = []
    for a in A:
        if len(L) == 0:
            L.append((a, log_ceil_dist(a)))
            continue
        r = log_ceil_dist(a)
        if r <= L[-1][1]:
            L.append((a,r))

    X = [l[0] for l in L]
    Y = [log(l[1]) for l in L]

    #print(L)

    plt.plot(X, Y, 'g', label='ceil dist')
    #plt.show()

def graph_decreasing_interval_width(A):
    L = []
    for a in A:
        L.append((a, upper_bound(a) - lower_bound(a)))

    X = [l[0] for l in L]
    Y = [log(l[1]) for l in L]

    plt.plot(X, Y, 'b', label='interval')

def graph_denom_order(A):
    L = []
    for a in A:
        if len(L) == 0:
            L.append((a, log_ceil_dist(a)))
            continue
        r = log_ceil_dist(a)
        if r <= L[-1][1]:
            L.append((a,r))

    X = [log(l[0]) for l in L]
    Y = [log(l[1]) for l in L]

    print(L[-1])

    plt.plot(X,Y, 'r')

def graph_ceil_reference(A, p=-1):
    X = [a for a in A]
    Y = [1*log(a**(p)) for a in A]
    plt.plot(X,Y, 'r', label='ceil reference')

def graph_width_reference(A):
    X = [a for a in A]
    e = 1
    Y = [log(2**(-a + e)) for a in A]
    plt.plot(X,Y, 'k', label='width reference')

def reduce_frac(num, den):
    while gcd(num, den) != 1:
        i = 2
        while True:
            if num % i == 0 and den % i == 0:
                num //= i
                den //= i
                break
            i += 1
    return num, den

def graph_order_approx(acc=30):
    temp = mp.dps
    mp.dps = acc
    X = []
    Y = []
    r = log(3) / log(2)
    rs = str(r).replace('.', '')
    print(rs)
    i = 1
    while i < len(rs):
        num = int(rs[:i])
        den = 10**(i-1)

        num, den = reduce_frac(num, den)
        v = num / den
        print('{}/{}'.format(num, den))
        X.append(den)
        Y.append(abs(r - v))
        i += 1

    X = [log(x) for x in X]
    Y = [log(y) for y in Y]

    #print(X)
    #print(Y)

    plt.plot(X,Y)
    plt.show()

    mp.dps = temp

def get_convergents(L):
    H = [L[0], L[1] * L[0] + 1]
    K = [1, L[1]]

    i = 2
    while i < len(L):
        H.append(L[i] * H[i - 1] + H[i - 2])
        K.append(L[i] * K[i - 1] + K[i - 2])
        i += 1

    return H, K

if __name__ == '__main__':
    '''A = range(1, 500000)
    #graph_decreasing_log_ceil_dist(A)
    #graph_decreasing_interval_width(A)
    graph_denom_order(A)
    graph_reference(A)
    plt.show()'''

    #A = range(1, 500000)
    #graph_order_approx(120)

    '''A = range(1, 100)
    #graph_decreasing_log_ceil_dist(A)
    graph_decreasing_interval_width(A)
    graph_decreasing_log_ceil_dist(A)
    graph_width_reference(A)
    graph_ceil_reference(A, -1)
    graph_ceil_reference(A, -2)
    #graph_denom_order(A)
    #graph_reference(A)
    plt.legend()
    plt.show()'''

    Y = []
    N = range(0, 1000)
    for n in N:
        r = log(abs(log(6**n + 2**n - 3**n) - log(6**n)))
        Y.append(r)
    Yp = [log(2**(-n)) for n in N]
    plt.plot(N, Y, 'b', label='val')
    plt.plot(N, Yp, 'g', label='ref')
    plt.legend()
    plt.show()


    '''VAL = log(3) / log(2)

    H, K = get_convergents(LC[:90])

    E = []

    for h, k in zip(H, K):
        E.append(abs(mpf(h) / k - VAL))

    X = K
    Y = []

    for e in E:
        Y.append(log(e))

    plt.plot(X,Y, 'b')
    Yp = [log(x**(-2.2)) for x in X]
    plt.plot(X,Yp, 'r')

    for y, yp in zip(Y, Yp):
        print(y > yp)
    plt.show()'''
